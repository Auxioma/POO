<?php

// On d√©clare un espace de noms (namespace), c‚Äôest comme un dossier logique pour organiser ton code.
// Cela permet aussi d‚Äô√©viter les conflits de noms entre diff√©rentes classes portant le m√™me nom.
namespace Framework;

// On importe les classes externes dont on a besoin pour g√©rer les requ√™tes et les r√©ponses HTTP.
// Ces classes sont fournies par des biblioth√®ques conformes aux standards PSR (interop√©rabilit√© PHP).
use GuzzleHttp\Psr7\Response; // Cette classe permet de cr√©er des objets Response facilement.
use Psr\Http\Message\ResponseInterface; // Interface pour toutes les r√©ponses HTTP
use Psr\Http\Message\ServerRequestInterface; // Interface pour les requ√™tes HTTP entrantes (URL, m√©thode, etc.)

/**
 * La classe App est **le noyau de ton application web**.
 * C‚Äôest elle qui :
 * - charge tous les modules actifs de l‚Äôapplication,
 * - installe les routes dans le routeur,
 * - traite chaque requ√™te HTTP (URL) re√ßue,
 * - ex√©cute la bonne fonction en r√©ponse √† cette requ√™te,
 * - et retourne une r√©ponse HTTP (HTML, JSON, etc.).
 */
class App
{
    /**
     * Tableau qui va contenir tous les modules de l'application.
     * Un module est une ‚Äúbrique‚Äù de ton site web (ex : BlogModule, AuthModule, AdminModule‚Ä¶).
     * Chaque module peut enregistrer ses propres routes.
     * @var array
     */
    private $modules = [];

    /**
     * Le routeur permet d'associer une URL √† une fonction (souvent un contr√¥leur).
     * C‚Äôest un √©l√©ment essentiel dans tout framework web.
     * Exemple : "/blog/mon-article" ‚Üí BlogController::show()
     * @var Router
     */
    private $router;

    /**
     * Le constructeur est ex√©cut√© automatiquement quand on cr√©e un objet de cette classe.
     * Exemple : $app = new App([BlogModule::class, AuthModule::class]);
     *
     * @param string[] $modules Liste des modules (noms de classes) √† charger automatiquement.
     */
    public function __construct(array $modules = [])
    {
        // On cr√©e une instance du routeur pour pouvoir enregistrer des routes.
        $this->router = new Router();

        // On parcourt tous les modules pass√©s en param√®tre du constructeur.
        foreach ($modules as $module) {
            // On instancie chaque module, en lui donnant le routeur.
            // Chaque module peut ainsi appeler $router->get(...) pour enregistrer ses routes.
            $this->modules[] = new $module($this->router);
        }
    }

    /**
     * Cette m√©thode ex√©cute le c≈ìur du framework.
     * Elle re√ßoit une requ√™te HTTP (g√©n√©ralement automatiquement via un serveur comme Apache ou Nginx)
     * et doit retourner une r√©ponse HTTP adapt√©e.
     *
     * @param ServerRequestInterface $request L‚Äôobjet repr√©sentant la requ√™te HTTP du client.
     * @return ResponseInterface L‚Äôobjet r√©ponse √† envoyer au client (navigateur ou API).
     */
    public function run(ServerRequestInterface $request): ResponseInterface
    {
        // On r√©cup√®re le chemin de l‚ÄôURL demand√©e, par exemple "/blog/mon-article"
        $uri = $request->getUri()->getPath();

        // V√©rification : si l‚ÄôURL se termine par un slash ("/"), on redirige vers la version sans slash.
        // Exemple : "/blog/" redirig√© vers "/blog"
        // C‚Äôest une bonne pratique SEO pour √©viter le contenu dupliqu√©.
        if (!empty($uri) && $uri[-1] === "/") {
            // Cr√©ation d'une nouvelle r√©ponse HTTP avec un statut 301 (redirection permanente).
            // On ajoute un en-t√™te "Location" pour indiquer la nouvelle URL.
            return (new Response())
                ->withStatus(301) // 301 = redirection permanente
                ->withHeader('Location', substr($uri, 0, -1)); // On enl√®ve le "/" final
        }

        // On demande au routeur de trouver une route qui correspond √† la requ√™te actuelle.
        // Il va comparer la m√©thode HTTP (GET, POST...) et l‚ÄôURL ("/blog/article-12", etc.)
        $route = $this->router->match($request);

        // Si aucune route ne correspond, cela signifie que l‚ÄôURL demand√©e n‚Äôexiste pas.
        // On retourne alors une r√©ponse HTTP avec le statut 404 (Not Found).
        if (is_null($route)) {
            return new Response(404, [], '<h1>Erreur 404 : Page non trouv√©e</h1>');
        }

        // Si une route est trouv√©e, elle peut contenir des **param√®tres** extraits de l‚ÄôURL.
        // Exemple : /blog/article-mon-slug-15 ‚Üí ['slug' => 'mon-slug', 'id' => '15']
        $params = $route->getParams();

        // Ces param√®tres doivent √™tre rendus accessibles dans le contr√¥leur.
        // Pour cela, on les ajoute √† la requ√™te via `withAttribute`.
        // array_reduce permet de parcourir chaque cl√© et valeur du tableau $params.
        $request = array_reduce(array_keys($params), function ($request, $key) use ($params) {
            // On ajoute chaque param√®tre √† l‚Äôobjet $request
            return $request->withAttribute($key, $params[$key]);
        }, $request);

        // Maintenant qu'on a une requ√™te bien pr√©par√©e, on peut ex√©cuter le contr√¥leur associ√©.
        // Le contr√¥leur est g√©n√©ralement une fonction ou une m√©thode.
        // On l‚Äôex√©cute en lui passant la requ√™te en param√®tre.
        $response = call_user_func_array($route->getCallback(), [$request]);

        // üß† Le contr√¥leur peut retourner plusieurs types de r√©sultats.

        // Si le r√©sultat est une cha√Æne de caract√®res (souvent du HTML),
        // on cr√©e une r√©ponse HTTP avec un statut 200 (OK) et ce contenu.
        if (is_string($response)) {
            return new Response(200, [], $response);
        }

        // Si le r√©sultat est d√©j√† un objet de type ResponseInterface (ex : JSON, HTML complet),
        // on le retourne tel quel.
        elseif ($response instanceof ResponseInterface) {
            return $response;
        }

        // Si le r√©sultat n‚Äôest ni une cha√Æne ni une r√©ponse HTTP valide,
        // c‚Äôest une erreur de d√©veloppement. On lance une exception.
        else {
            throw new \Exception('La r√©ponse retourn√©e n‚Äôest pas valide. Elle doit √™tre une cha√Æne ou une instance de ResponseInterface.');
        }
    }
}
